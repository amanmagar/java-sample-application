name: CI Pipeline

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]
  workflow_dispatch:

env:
  JAVA_VERSION: '17'
  CACHE_KEY: maven-deps
  ECR_REPOSITORY: your-ecr-repo-url
  AWS_REGION: us-west-2
  TRIVY_SEVERITY: 'HIGH,CRITICAL'

jobs:
  pre-commit:
    name: Pre-commit checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install pre-commit
        run: |
          pip install pre-commit
          pre-commit install

      - name: Run pre-commit checks
        run: pre-commit run --all-files

  lint:
    name: Lint
    runs-on: ubuntu-latest
    needs: pre-commit
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: maven

      - name: Run Checkstyle
        run: ./mvnw checkstyle:check

      - name: Install Hadolint
        run: |
          curl -sL -o /tmp/hadolint "https://github.com/hadolint/hadolint/releases/latest/download/hadolint-Linux-x86_64"
          chmod +x /tmp/hadolint
          sudo mv /tmp/hadolint /usr/local/bin/

      - name: Run Hadolint on Dockerfiles
        run: find . -name "Dockerfile*" -exec hadolint {} \;

  test:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: maven

      - name: Run tests
        run: ./mvnw verify

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results
          path: '**/target/surefire-reports'

      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: '**/target/site/jacoco'

  build:
    name: Build and Push
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: maven

      - name: Build with Maven
        run: ./mvnw package -DskipTests

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push Docker images
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build and push each service
          for service in api-gateway discovery-server inventory-service notification-service order-service product-service; do
            echo "Building $service"
            docker build -t $ECR_REGISTRY/$ECR_REPOSITORY/$service:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY/$service:latest ./$service
            docker push $ECR_REGISTRY/$ECR_REPOSITORY/$service:$IMAGE_TAG
            docker push $ECR_REGISTRY/$ECR_REPOSITORY/$service:latest
          done

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: maven

      - name: OWASP Dependency Check
        run: ./mvnw org.owasp:dependency-check-maven:check

      - name: Upload dependency check report
        uses: actions/upload-artifact@v3
        with:
          name: dependency-check-report
          path: '**/target/dependency-check-report.html'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin

      - name: Scan Docker images with Trivy
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Scan each service image
          for service in api-gateway discovery-server inventory-service notification-service order-service product-service; do
            echo "Scanning $service"
            trivy image --exit-code 0 --severity $TRIVY_SEVERITY --no-progress $ECR_REGISTRY/$ECR_REPOSITORY/$service:$IMAGE_TAG
          done

      - name: Upload Trivy scan results
        uses: actions/upload-artifact@v3
        with:
          name: trivy-results
          path: trivy-results.sarif

  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [pre-commit, lint, test, build, security-scan]
    if: always()
    steps:
      - name: Check build status
        uses: technote-space/workflow-conclusion-action@v3

      - name: Send notification
        if: env.WORKFLOW_CONCLUSION == 'failure'
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: ci-failures
          SLACK_COLOR: danger
          SLACK_TITLE: CI Pipeline Failed
          SLACK_MESSAGE: |
            The CI pipeline for ${{ github.repository }} has failed.
            See details: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}